
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatar: 'avatar',
  roles: 'roles',
  dateOfBirth: 'dateOfBirth',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  isVerified: 'isVerified',
  isActive: 'isActive',
  isBanned: 'isBanned',
  banReason: 'banReason',
  bannedAt: 'bannedAt',
  bannedBy: 'bannedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  agencyId: 'agencyId'
};

exports.Prisma.AgencyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  logo: 'logo',
  activityType: 'activityType',
  businessPhone: 'businessPhone',
  businessEmail: 'businessEmail',
  website: 'website',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  businessRegistrationNumber: 'businessRegistrationNumber',
  activityLicense: 'activityLicense',
  taxId: 'taxId',
  bankAccountInfo: 'bankAccountInfo',
  isVerified: 'isVerified',
  isActive: 'isActive',
  isSuspended: 'isSuspended',
  suspensionReason: 'suspensionReason',
  suspendedAt: 'suspendedAt',
  suspendedBy: 'suspendedBy',
  verificationStatus: 'verificationStatus',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  verificationNotes: 'verificationNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgencyMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agencyId: 'agencyId',
  role: 'role',
  canManageProperties: 'canManageProperties',
  canManageTeam: 'canManageTeam',
  canViewAllData: 'canViewAllData',
  canContactClients: 'canContactClients',
  canScheduleViewings: 'canScheduleViewings',
  canSetPrices: 'canSetPrices',
  canUploadDocuments: 'canUploadDocuments',
  joinedAt: 'joinedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgencyRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agencyId: 'agencyId',
  role: 'role',
  title: 'title',
  description: 'description',
  canManageProperties: 'canManageProperties',
  canManageTeam: 'canManageTeam',
  canViewAllData: 'canViewAllData',
  canContactClients: 'canContactClients',
  canScheduleViewings: 'canScheduleViewings',
  canSetPrices: 'canSetPrices',
  canUploadDocuments: 'canUploadDocuments',
  assignedAt: 'assignedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgencyVerificationDocumentScalarFieldEnum = {
  id: 'id',
  documentType: 'documentType',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  title: 'title',
  description: 'description',
  isVerified: 'isVerified',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  reviewNotes: 'reviewNotes',
  uploadedAt: 'uploadedAt',
  agencyId: 'agencyId'
};

exports.Prisma.AgencyPerformanceScalarFieldEnum = {
  id: 'id',
  totalSales: 'totalSales',
  totalRentals: 'totalRentals',
  totalRevenue: 'totalRevenue',
  topAgent: 'topAgent',
  topAgentSales: 'topAgentSales',
  topAgentRevenue: 'topAgentRevenue',
  salesThisMonth: 'salesThisMonth',
  salesThisYear: 'salesThisYear',
  revenueThisMonth: 'revenueThisMonth',
  revenueThisYear: 'revenueThisYear',
  lastCalculated: 'lastCalculated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  agencyId: 'agencyId'
};

exports.Prisma.AgentPerformanceScalarFieldEnum = {
  id: 'id',
  totalSales: 'totalSales',
  totalRentals: 'totalRentals',
  totalRevenue: 'totalRevenue',
  salesThisMonth: 'salesThisMonth',
  salesThisYear: 'salesThisYear',
  revenueThisMonth: 'revenueThisMonth',
  revenueThisYear: 'revenueThisYear',
  averageResponseTime: 'averageResponseTime',
  totalInquiries: 'totalInquiries',
  convertedInquiries: 'convertedInquiries',
  lastCalculated: 'lastCalculated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  agentId: 'agentId'
};

exports.Prisma.AgencyInquiryScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  message: 'message',
  whoSentIt: 'whoSentIt',
  whichProperty: 'whichProperty',
  status: 'status',
  whenSent: 'whenSent',
  response: 'response',
  respondedAt: 'respondedAt',
  respondedBy: 'respondedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  agencyId: 'agencyId',
  propertyId: 'propertyId'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  transactionType: 'transactionType',
  price: 'price',
  rentAmount: 'rentAmount',
  pricePerSqm: 'pricePerSqm',
  deposit: 'deposit',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  neighborhood: 'neighborhood',
  totalArea: 'totalArea',
  landArea: 'landArea',
  floorNumber: 'floorNumber',
  totalFloors: 'totalFloors',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  livingRooms: 'livingRooms',
  kitchen: 'kitchen',
  yearBuilt: 'yearBuilt',
  condition: 'condition',
  furnished: 'furnished',
  amenities: 'amenities',
  utilities: 'utilities',
  parking: 'parking',
  garden: 'garden',
  balcony: 'balcony',
  elevator: 'elevator',
  pool: 'pool',
  ac: 'ac',
  petPolicy: 'petPolicy',
  nearbyServices: 'nearbyServices',
  energyRating: 'energyRating',
  leaseType: 'leaseType',
  minRentalPeriod: 'minRentalPeriod',
  availableDate: 'availableDate',
  status: 'status',
  isVerified: 'isVerified',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  verificationNotes: 'verificationNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  listedAt: 'listedAt',
  soldAt: 'soldAt',
  rentedAt: 'rentedAt',
  ownerId: 'ownerId',
  agentId: 'agentId',
  agencyId: 'agencyId'
};

exports.Prisma.PropertyPhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  caption: 'caption',
  altText: 'altText',
  isPrimary: 'isPrimary',
  order: 'order',
  category: 'category',
  createdAt: 'createdAt',
  propertyId: 'propertyId'
};

exports.Prisma.PropertyVideoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  thumbnail: 'thumbnail',
  duration: 'duration',
  caption: 'caption',
  order: 'order',
  createdAt: 'createdAt',
  propertyId: 'propertyId'
};

exports.Prisma.VirtualTourScalarFieldEnum = {
  id: 'id',
  url: 'url',
  platform: 'platform',
  caption: 'caption',
  order: 'order',
  createdAt: 'createdAt',
  propertyId: 'propertyId'
};

exports.Prisma.PropertyViewScalarFieldEnum = {
  id: 'id',
  viewedAt: 'viewedAt',
  viewDuration: 'viewDuration',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId',
  propertyId: 'propertyId'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  notes: 'notes',
  priority: 'priority',
  createdAt: 'createdAt',
  userId: 'userId',
  propertyId: 'propertyId',
  listId: 'listId',
  favoriteListId: 'favoriteListId'
};

exports.Prisma.FavoriteListScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isPublic: 'isPublic',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PropertyRequestScalarFieldEnum = {
  id: 'id',
  type: 'type',
  message: 'message',
  status: 'status',
  preferredDate: 'preferredDate',
  preferredTime: 'preferredTime',
  budget: 'budget',
  timeline: 'timeline',
  sellerResponse: 'sellerResponse',
  responseDate: 'responseDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  buyerId: 'buyerId',
  propertyId: 'propertyId',
  userId: 'userId'
};

exports.Prisma.PropertyInquiryScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  message: 'message',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  propertyId: 'propertyId'
};

exports.Prisma.PropertyComparisonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PropertyComparisonPropertiesScalarFieldEnum = {
  id: 'id',
  propertyComparisonId: 'propertyComparisonId',
  propertyId: 'propertyId'
};

exports.Prisma.PropertyReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reviewerId: 'reviewerId',
  propertyId: 'propertyId',
  userId: 'userId'
};

exports.Prisma.PropertyCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  isPublic: 'isPublic',
  isModerated: 'isModerated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  propertyId: 'propertyId',
  userId: 'userId'
};

exports.Prisma.PropertyViewingScalarFieldEnum = {
  id: 'id',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  status: 'status',
  notes: 'notes',
  buyerNotes: 'buyerNotes',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  propertyId: 'propertyId',
  sellerId: 'sellerId',
  buyerId: 'buyerId',
  requestId: 'requestId',
  propertyRequestId: 'propertyRequestId'
};

exports.Prisma.PropertyAnalyticsScalarFieldEnum = {
  id: 'id',
  totalViews: 'totalViews',
  uniqueViews: 'uniqueViews',
  totalFavorites: 'totalFavorites',
  totalRequests: 'totalRequests',
  totalInquiries: 'totalInquiries',
  averageViewDuration: 'averageViewDuration',
  bounceRate: 'bounceRate',
  conversionRate: 'conversionRate',
  viewsThisWeek: 'viewsThisWeek',
  viewsThisMonth: 'viewsThisMonth',
  viewsThisYear: 'viewsThisYear',
  lastCalculated: 'lastCalculated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  propertyId: 'propertyId',
  userId: 'userId'
};

exports.Prisma.AdminActionScalarFieldEnum = {
  id: 'id',
  action: 'action',
  details: 'details',
  metadata: 'metadata',
  createdAt: 'createdAt',
  adminId: 'adminId',
  propertyId: 'propertyId',
  userId: 'userId',
  agencyId: 'agencyId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  readAt: 'readAt',
  data: 'data',
  link: 'link',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  propertyId: 'propertyId',
  requestId: 'requestId',
  propertyRequestId: 'propertyRequestId'
};

exports.Prisma.SavedSearchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  propertyTypes: 'propertyTypes',
  transactionTypes: 'transactionTypes',
  minPrice: 'minPrice',
  maxPrice: 'maxPrice',
  minArea: 'minArea',
  maxArea: 'maxArea',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  cities: 'cities',
  neighborhoods: 'neighborhoods',
  isActive: 'isActive',
  notifyOnMatch: 'notifyOnMatch',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PlatformSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category',
  dataType: 'dataType',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlatformAnalyticsScalarFieldEnum = {
  id: 'id',
  totalUsers: 'totalUsers',
  activeUsers: 'activeUsers',
  totalProperties: 'totalProperties',
  activeProperties: 'activeProperties',
  totalSales: 'totalSales',
  totalRentals: 'totalRentals',
  totalRevenue: 'totalRevenue',
  totalViews: 'totalViews',
  totalRequests: 'totalRequests',
  totalFavorites: 'totalFavorites',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  BUYER: 'BUYER',
  SELLER: 'SELLER',
  AGENT: 'AGENT',
  ASSISTANT: 'ASSISTANT',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.AgencyActivityType = exports.$Enums.AgencyActivityType = {
  REAL_ESTATE: 'REAL_ESTATE',
  DELIVERY: 'DELIVERY',
  MARKETING: 'MARKETING',
  SECURITY: 'SECURITY',
  OTHER: 'OTHER'
};

exports.AgencyVerificationStatus = exports.$Enums.AgencyVerificationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

exports.InquiryStatus = exports.$Enums.InquiryStatus = {
  OPEN: 'OPEN',
  PENDING: 'PENDING',
  DONE: 'DONE'
};

exports.PropertyType = exports.$Enums.PropertyType = {
  LAND: 'LAND',
  HOUSE: 'HOUSE',
  APARTMENT: 'APARTMENT',
  CONDO: 'CONDO',
  TOWNHOUSE: 'TOWNHOUSE',
  STUDIO: 'STUDIO',
  VILLA: 'VILLA',
  COMMERCIAL: 'COMMERCIAL',
  OFFICE: 'OFFICE',
  SHOP: 'SHOP',
  GARAGE: 'GARAGE',
  WAREHOUSE: 'WAREHOUSE'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  SALE: 'SALE',
  RENT: 'RENT',
  LEASE: 'LEASE',
  SHORT_TERM: 'SHORT_TERM'
};

exports.PropertyCondition = exports.$Enums.PropertyCondition = {
  NEW: 'NEW',
  RENOVATED: 'RENOVATED',
  GOOD: 'GOOD',
  FAIR: 'FAIR',
  NEEDS_WORK: 'NEEDS_WORK',
  POOR: 'POOR'
};

exports.LeaseType = exports.$Enums.LeaseType = {
  SHORT_TERM: 'SHORT_TERM',
  LONG_TERM: 'LONG_TERM',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY',
  FLEXIBLE: 'FLEXIBLE'
};

exports.PropertyStatus = exports.$Enums.PropertyStatus = {
  DRAFT: 'DRAFT',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ACTIVE: 'ACTIVE',
  ON_HOLD: 'ON_HOLD',
  FOR_SALE: 'FOR_SALE',
  FOR_RENT: 'FOR_RENT',
  SOLD: 'SOLD',
  RENTED: 'RENTED',
  INACTIVE: 'INACTIVE'
};

exports.RequestType = exports.$Enums.RequestType = {
  VISIT_REQUEST: 'VISIT_REQUEST',
  INTEREST_REQUEST: 'INTEREST_REQUEST',
  BUY_REQUEST: 'BUY_REQUEST',
  RENT_REQUEST: 'RENT_REQUEST',
  INFORMATION_REQUEST: 'INFORMATION_REQUEST'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  PROPERTY_APPROVED: 'PROPERTY_APPROVED',
  PROPERTY_REJECTED: 'PROPERTY_REJECTED',
  NEW_INQUIRY: 'NEW_INQUIRY',
  REQUEST_ACCEPTED: 'REQUEST_ACCEPTED',
  REQUEST_REJECTED: 'REQUEST_REJECTED',
  VIEWING_SCHEDULED: 'VIEWING_SCHEDULED',
  VIEWING_CANCELLED: 'VIEWING_CANCELLED',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  PROPERTY_SOLD: 'PROPERTY_SOLD',
  PROPERTY_RENTED: 'PROPERTY_RENTED',
  SYSTEM_ALERT: 'SYSTEM_ALERT'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Agency: 'Agency',
  AgencyMember: 'AgencyMember',
  AgencyRole: 'AgencyRole',
  AgencyVerificationDocument: 'AgencyVerificationDocument',
  AgencyPerformance: 'AgencyPerformance',
  AgentPerformance: 'AgentPerformance',
  AgencyInquiry: 'AgencyInquiry',
  Property: 'Property',
  PropertyPhoto: 'PropertyPhoto',
  PropertyVideo: 'PropertyVideo',
  VirtualTour: 'VirtualTour',
  PropertyView: 'PropertyView',
  Favorite: 'Favorite',
  FavoriteList: 'FavoriteList',
  PropertyRequest: 'PropertyRequest',
  PropertyInquiry: 'PropertyInquiry',
  PropertyComparison: 'PropertyComparison',
  PropertyComparisonProperties: 'PropertyComparisonProperties',
  PropertyReview: 'PropertyReview',
  PropertyComment: 'PropertyComment',
  PropertyViewing: 'PropertyViewing',
  PropertyAnalytics: 'PropertyAnalytics',
  AdminAction: 'AdminAction',
  Notification: 'Notification',
  Payment: 'Payment',
  SavedSearch: 'SavedSearch',
  PlatformSetting: 'PlatformSetting',
  PlatformAnalytics: 'PlatformAnalytics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
