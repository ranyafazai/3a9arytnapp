// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

// User roles enum - based on Picture 1
enum UserRole {
  BUYER // Can browse, search, view, save favorites, compare, send requests
  SELLER // Can add properties, manage listings, schedule viewings
  AGENT // Real estate agent with seller capabilities
  ASSISTANT // Agency assistant with limited access
  MANAGER // Agency manager with full access
  ADMIN // Platform administrator with verification powers
  SUPER_ADMIN // Super administrator with full access
}

// Property types enum - based on Picture 6-10
enum PropertyType {
  LAND // Undeveloped land
  HOUSE // Single-family house
  APARTMENT // Apartment unit
  CONDO // Condominium
  TOWNHOUSE // Townhouse
  STUDIO // Studio apartment
  VILLA // Villa
  COMMERCIAL // Commercial property
  OFFICE // Office space
  SHOP // Retail space
  GARAGE // Garage or parking space
  WAREHOUSE // Warehouse or storage
}

// Property status enum - based on Picture 5-11 seller actions
enum PropertyStatus {
  DRAFT // Property being created
  UNDER_REVIEW // Waiting for admin verification
  APPROVED // Admin verified and approved
  REJECTED // Admin rejected
  ACTIVE // Available for sale/rent
  ON_HOLD // Temporarily unavailable
  FOR_SALE // Available for purchase
  FOR_RENT // Available for rental
  SOLD // Property sold
  RENTED // Property rented
  INACTIVE // No longer available
}

// Transaction types enum - based on Picture 6-10
enum TransactionType {
  SALE // Property for sale
  RENT // Property for rent
  LEASE // Long-term lease
  SHORT_TERM // Short-term rental
}

// Request types enum - based on Picture 2-4 buyer actions
enum RequestType {
  VISIT_REQUEST // Request to visit property
  INTEREST_REQUEST // Express interest in property
  BUY_REQUEST // Request to purchase property
  RENT_REQUEST // Request to rent property
  INFORMATION_REQUEST // Request for more information
}

// Request status enum
enum RequestStatus {
  PENDING // Request sent, waiting for response
  ACCEPTED // Request accepted by seller
  REJECTED // Request rejected by seller
  CANCELLED // Request cancelled by buyer
  COMPLETED // Request fulfilled
  EXPIRED // Request expired
}

// Payment status enum
enum PaymentStatus {
  PENDING // Payment initiated
  PROCESSING // Payment being processed
  COMPLETED // Payment successful
  FAILED // Payment failed
  REFUNDED // Payment refunded
  CANCELLED // Payment cancelled
}

// Property condition enum - based on property characteristics
enum PropertyCondition {
  NEW // New construction
  RENOVATED // Recently renovated
  GOOD // Good condition
  FAIR // Fair condition
  NEEDS_WORK // Needs renovation/repair
  POOR // Poor condition
}

// Lease type enum - for rental properties
enum LeaseType {
  SHORT_TERM // Short-term rental
  LONG_TERM // Long-term rental
  MONTHLY // Monthly rental
  YEARLY // Yearly rental
  FLEXIBLE // Flexible terms
}

// Notification types enum
enum NotificationType {
  PROPERTY_APPROVED
  PROPERTY_REJECTED
  NEW_INQUIRY
  REQUEST_ACCEPTED
  REQUEST_REJECTED
  VIEWING_SCHEDULED
  VIEWING_CANCELLED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  PROPERTY_SOLD
  PROPERTY_RENTED
  SYSTEM_ALERT
}

// Agency verification status enum - based on admin verification mind map
enum AgencyVerificationStatus {
  PENDING // Documents uploaded, waiting for admin review
  APPROVED // Admin verified and approved
  REJECTED // Admin rejected
  UNDER_REVIEW // Admin reviewing documents
}

// Inquiry status enum - based on track inquiries mind map
enum InquiryStatus {
  OPEN // New inquiry received
  PENDING // Inquiry being processed
  DONE // Inquiry completed/resolved
}

// Agency activity type enum - based on business information mind map
enum AgencyActivityType {
  REAL_ESTATE // Real estate agency
  DELIVERY // Delivery services
  MARKETING // Marketing services
  SECURITY // Security services
  OTHER // Other business types
}

// ==================== MODELS ====================

// User model - represents all users in the system (Picture 1)
model User {
  id        String  @id @default(cuid())
  email     String  @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  avatar    String?

  // User roles and capabilities (Picture 1)
  roles UserRole[] @default([BUYER]) // User can have multiple roles

  // Profile information
  dateOfBirth DateTime?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?

  // Account status
  isVerified Boolean   @default(false)
  isActive   Boolean   @default(true)
  isBanned   Boolean   @default(false)
  banReason  String?
  bannedAt   DateTime?
  bannedBy   String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==================== BUYER RELATIONSHIPS (Picture 2-4) ====================

  // Browse and search properties
  viewedProperties PropertyView[] // Track which properties user has viewed

  // Save favorites
  favorites     Favorite[] // Properties saved as favorites
  favoriteLists FavoriteList[] // Organized favorite collections

  // Send requests and track inquiries
  requests  PropertyRequest[] // All requests sent by user
  inquiries PropertyInquiry[] // General inquiries about properties

  // Compare properties
  propertyComparisons PropertyComparison[] // User's property comparisons

  // Review comments
  reviews  PropertyReview[] // Reviews written by user
  comments PropertyComment[] // Comments written by user

  // ==================== SELLER RELATIONSHIPS (Picture 5-11) ====================

  // Add and manage properties
  ownedProperties   Property[] @relation("PropertyOwner") // Properties owned by user
  managedProperties Property[] @relation("PropertyAgent") // Properties managed by user (if agent)

  // Schedule viewings
  scheduledViewings PropertyViewing[] @relation("PropertyViewingSeller") // Viewings scheduled by seller
  buyerViewings     PropertyViewing[] @relation("PropertyViewingBuyer") // Viewings attended by buyer

  // Monitor performance
  propertyAnalytics PropertyAnalytics[] // Performance metrics for properties

  // ==================== AGENCY RELATIONSHIPS ====================

  // Agency membership and role
  agency      Agency?      @relation(fields: [agencyId], references: [id]) // Agency the user belongs to
  agencyId    String?
  agencyRoles AgencyRole[] // User's roles within agencies

  // ==================== ADMIN RELATIONSHIPS ====================

  // Admin actions performed by this user
  adminActions       AdminAction[] @relation("AdminActionPerformer") // If user is admin
  adminActionTargets AdminAction[] @relation("AdminActionTarget") // If user is target of admin action

  // ==================== NOTIFICATIONS ====================

  // User notifications
  notifications Notification[] // All notifications for user

  // ==================== PAYMENTS ====================

  // Payment history
  payments     Payment[] // Payments made by user
  AgencyMember AgencyMember[]
  SavedSearch  SavedSearch[]

  @@map("users")
}

// Agency model - real estate agencies (Picture 14-16)
model Agency {
  id String @id @default(cuid())

  // Agency information
  name        String
  description String?
  logo        String?

  // Business information (Picture 14-16 - Business Information)
  activityType  AgencyActivityType // Real Estate, Delivery, Marketing, etc.
  businessPhone String
  businessEmail String
  website       String?

  // Business address
  address   String
  city      String
  state     String
  zipCode   String
  country   String
  latitude  Float? // Pin on map
  longitude Float? // Pin on map

  // Business registration
  businessRegistrationNumber String? // Commercial registration number
  activityLicense            String? // Activity license
  taxId                      String? // Tax ID/VAT number
  bankAccountInfo            String? // Bank account for payments

  // Agency status and verification
  isVerified       Boolean   @default(false)
  isActive         Boolean   @default(true)
  isSuspended      Boolean   @default(false)
  suspensionReason String?
  suspendedAt      DateTime?
  suspendedBy      String?

  // Verification process (Picture 14-16 - Admin Verification)
  verificationStatus    AgencyVerificationStatus     @default(PENDING)
  verificationDocuments AgencyVerificationDocument[]
  verifiedBy            String? // Admin who verified
  verifiedAt            DateTime?
  verificationNotes     String? // Admin notes on verification

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==================== RELATIONSHIPS ====================

  // Team management
  teamMembers AgencyMember[] // All agency team members
  teamRoles   AgencyRole[] // All agency role assignments
  properties  Property[] // Properties managed by agency

  // Performance tracking
  performance AgencyPerformance? // Agency performance metrics

  // Inquiries and leads
  inquiries AgencyInquiry[] // Inquiries received by agency

  // Admin actions
  adminActions AdminAction[] // Admin actions related to agency
  User         User[]

  @@map("agencies")
}

// Agency Member model - team management (Picture 14-16 - Manage Team)
model AgencyMember {
  id String @id @default(cuid())

  // Member information
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  // Role within agency (Picture 14-16 - Roles)
  role UserRole // MANAGER, AGENT, ASSISTANT

  // Access permissions based on role
  canManageProperties Boolean @default(false) // Add/edit/delete properties
  canManageTeam       Boolean @default(false) // Manage team members
  canViewAllData      Boolean @default(false) // View all agency data
  canContactClients   Boolean @default(false) // Communicate with clients
  canScheduleViewings Boolean @default(false) // Schedule property viewings
  canSetPrices        Boolean @default(false) // Set property prices
  canUploadDocuments  Boolean @default(false) // Upload documents/photos

  // Performance tracking
  performance AgentPerformance? // Individual agent performance

  // Timestamps
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, agencyId]) // One role per user per agency
  @@map("agency_members")
}

// Agency Role model - defines user's role within an agency
model AgencyRole {
  id String @id @default(cuid())

  // Role information
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  // Role details
  role        UserRole // MANAGER, AGENT, ASSISTANT
  title       String? // Custom title (e.g., "Senior Agent")
  description String? // Role description

  // Access permissions based on role
  canManageProperties Boolean @default(false) // Add/edit/delete properties
  canManageTeam       Boolean @default(false) // Manage team members
  canViewAllData      Boolean @default(false) // View all agency data
  canContactClients   Boolean @default(false) // Communicate with clients
  canScheduleViewings Boolean @default(false) // Schedule property viewings
  canSetPrices        Boolean @default(false) // Set property prices
  canUploadDocuments  Boolean @default(false) // Upload documents/photos

  // Timestamps
  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, agencyId]) // One role per user per agency
  @@map("agency_roles")
}

// Agency Verification Document model - admin verification (Picture 14-16)
model AgencyVerificationDocument {
  id String @id @default(cuid())

  // Document information
  documentType String // BUSINESS_INFO, OFFICIAL_DOC, PROOF_ADDRESS, OFFICE_PHOTO
  fileName     String // Original filename
  fileUrl      String // Stored file URL
  fileSize     Int // File size in bytes
  mimeType     String // File MIME type

  // Document details
  title       String // Document title
  description String? // Document description
  isVerified  Boolean @default(false) // Admin verified this document

  // Admin review
  reviewedBy  String? // Admin who reviewed
  reviewedAt  DateTime?
  reviewNotes String? // Admin notes

  // Timestamps
  uploadedAt DateTime @default(now())

  // Relationships
  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId String

  @@map("agency_verification_documents")
}

// Agency Performance model - track performance (Picture 14-16 - Track Performance)
model AgencyPerformance {
  id String @id @default(cuid())

  // Performance metrics
  totalSales   Int   @default(0) // Total properties sold
  totalRentals Int   @default(0) // Total properties rented
  totalRevenue Float @default(0) // Total revenue generated

  // Agent performance tracking
  topAgent        String? // Agent with most sales
  topAgentSales   Int     @default(0) // Sales count of top agent
  topAgentRevenue Float   @default(0) // Revenue generated by top agent

  // Time-based metrics
  salesThisMonth   Int   @default(0) // Sales this month
  salesThisYear    Int   @default(0) // Sales this year
  revenueThisMonth Float @default(0) // Revenue this month
  revenueThisYear  Float @default(0) // Revenue this year

  // Timestamps
  lastCalculated DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  agencyId String @unique

  @@map("agency_performance")
}

// Agent Performance model - individual agent performance
model AgentPerformance {
  id String @id @default(cuid())

  // Performance metrics
  totalSales   Int   @default(0) // Properties sold by this agent
  totalRentals Int   @default(0) // Properties rented by this agent
  totalRevenue Float @default(0) // Revenue generated by this agent

  // Time-based metrics
  salesThisMonth   Int   @default(0) // Sales this month
  salesThisYear    Int   @default(0) // Sales this year
  revenueThisMonth Float @default(0) // Revenue this month
  revenueThisYear  Float @default(0) // Revenue this year

  // Response metrics
  averageResponseTime Float @default(0) // Average response time to inquiries
  totalInquiries      Int   @default(0) // Total inquiries received
  convertedInquiries  Int   @default(0) // Inquiries converted to sales

  // Timestamps
  lastCalculated DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  agent   AgencyMember @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String       @unique

  @@map("agent_performance")
}

// Agency Inquiry model - track inquiries (Picture 14-16 - Track Inquiries)
model AgencyInquiry {
  id String @id @default(cuid())

  // Inquiry details
  subject String // Inquiry subject
  message String // Inquiry message

  // Inquiry tracking (Picture 14-16 - Track Inquiries details)
  whoSentIt     String // Who sent the inquiry
  whichProperty String? // Which property inquired about
  status        InquiryStatus @default(OPEN) // open, pending, done
  whenSent      DateTime      @default(now()) // When they sent it

  // Response tracking
  response    String? // Agency response
  respondedAt DateTime? // When agency responded
  respondedBy String? // Who responded (agent ID)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  agency     Agency    @relation(fields: [agencyId], references: [id])
  agencyId   String
  property   Property? @relation(fields: [propertyId], references: [id]) // Related property
  propertyId String?

  @@map("agency_inquiries")
}

// Property model - represents real estate properties (Picture 6-10)
model Property {
  id String @id @default(cuid())

  // Basic Info (Picture 6-10 - Basic Information)
  title       String // Title/Listing name
  description String // Detailed description

  // Property classification
  type            PropertyType // LAND, HOUSE, APARTMENT, etc.
  transactionType TransactionType // SALE, RENT, LEASE

  // Pricing information
  price       Float? // Sale price (for sale properties)
  rentAmount  Float? // Monthly rent (for rental properties)
  pricePerSqm Float? // Price per square meter
  deposit     Float? // Security deposit (for rentals)

  // Location information
  address      String
  city         String
  state        String
  zipCode      String
  country      String
  latitude     Float?
  longitude    Float?
  neighborhood String?

  // Size and dimensions
  totalArea   Float // Total area in m²
  landArea    Float? // Land area in m²
  floorNumber Int? // Floor number (for apartments)
  totalFloors Int? // Total floors in building

  // Room information
  bedrooms    Int?
  bathrooms   Int?
  livingRooms Int?
  kitchen     String? // Kitchen type/description

  // Property characteristics (Picture 6-10 - Characteristics)
  yearBuilt Int? // Year of construction
  condition PropertyCondition // NEW, RENOVATED, NEEDS_WORK, etc.
  furnished Boolean? // Furnished or unfurnished

  // Amenities and features
  amenities String[] // Array of amenities
  utilities String[] // Utilities included
  parking   Boolean? // Parking available
  garden    Boolean? // Garden available
  balcony   Boolean? // Balcony available
  elevator  Boolean? // Elevator available
  pool      Boolean? // Pool available
  ac        Boolean? // Air conditioning

  // Additional characteristics
  petPolicy      String? // Pet policy
  nearbyServices String[] // Nearby services (schools, transport, shops)
  energyRating   String? // Energy efficiency rating

  // Rental-specific information
  leaseType       LeaseType? // For rental properties
  minRentalPeriod String? // Minimum rental period
  availableDate   DateTime? // When property becomes available

  // Property status and verification (Picture 5-11)
  status            PropertyStatus @default(DRAFT)
  isVerified        Boolean        @default(false)
  verifiedBy        String? // Admin who verified
  verifiedAt        DateTime?
  verificationNotes String? // Admin notes on verification

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listedAt  DateTime? // When property was listed
  soldAt    DateTime? // When property was sold
  rentedAt  DateTime? // When property was rented

  // ==================== RELATIONSHIPS ====================

  // Ownership and management
  owner    User    @relation("PropertyOwner", fields: [ownerId], references: [id]) // Property owner
  ownerId  String
  agent    User?   @relation("PropertyAgent", fields: [agentId], references: [id]) // Managing agent
  agentId  String?
  agency   Agency? @relation(fields: [agencyId], references: [id]) // Managing agency
  agencyId String?

  // Media and content
  photos       PropertyPhoto[] // Property photos
  videos       PropertyVideo[] // Property videos
  virtualTours VirtualTour[] // Virtual tour links

  // Buyer interactions (Picture 2-4)
  views       PropertyView[] // Property views by buyers
  favorites   Favorite[] // Favorites by buyers
  requests    PropertyRequest[] // Requests from buyers
  inquiries   PropertyInquiry[] // General inquiries
  comparisons PropertyComparisonProperties[] // Property comparisons
  reviews     PropertyReview[] // Property reviews
  comments    PropertyComment[] // Property comments

  // Seller actions (Picture 5-11)
  viewings  PropertyViewing[] // Scheduled viewings
  analytics PropertyAnalytics[] // Performance analytics

  // Admin actions
  adminActions AdminAction[] // Admin actions on this property

  // Payments
  payments Payment[] // Payments related to this property

  // Agency inquiries
  agencyInquiries AgencyInquiry[] // Inquiries about this property

  @@map("properties")
}

// Property Photo model - for photos, albums, videos (Picture 6-10)
model PropertyPhoto {
  id        String  @id @default(cuid())
  url       String // Photo URL
  caption   String? // Photo caption
  altText   String? // Alt text for accessibility
  isPrimary Boolean @default(false) // Primary photo for listing
  order     Int     @default(0) // Display order
  category  String? // Photo category (exterior, interior, etc.)

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  @@map("property_photos")
}

// Property Video model - for video content
model PropertyVideo {
  id        String  @id @default(cuid())
  url       String // Video URL
  thumbnail String? // Video thumbnail
  duration  Int? // Video duration in seconds
  caption   String? // Video caption
  order     Int     @default(0) // Display order

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  @@map("property_videos")
}

// Virtual Tour model - for virtual tour links
model VirtualTour {
  id       String  @id @default(cuid())
  url      String // Virtual tour URL
  platform String? // Platform (YouTube, Matterport, etc.)
  caption  String? // Tour description
  order    Int     @default(0) // Display order

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  @@map("virtual_tours")
}

// ==================== BUYER ACTION MODELS (Picture 2-4) ====================

// Property View model - track which properties user has viewed
model PropertyView {
  id String @id @default(cuid())

  // View details
  viewedAt     DateTime @default(now())
  viewDuration Int? // How long user viewed (in seconds)
  ipAddress    String? // IP address for analytics
  userAgent    String? // Browser/device info

  // Relationships
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  @@unique([userId, propertyId]) // One view record per user per property
  @@map("property_views")
}

// Favorite model - save properties as favorites
model Favorite {
  id String @id @default(cuid())

  // Favorite details
  notes    String? // User notes about this favorite
  priority Int? // Priority level (1-5)

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  property       Property      @relation(fields: [propertyId], references: [id])
  propertyId     String
  list           FavoriteList? @relation(fields: [favoriteListId], references: [id]) // Optional: assign to a specific list
  listId         String?
  favoriteListId String?

  @@unique([userId, propertyId]) // One favorite per user per property
  @@map("favorites")
}

// Favorite List model - organize favorites into lists
model FavoriteList {
  id          String  @id @default(cuid())
  name        String // List name
  description String? // List description
  isPublic    Boolean @default(false) // Public or private list
  isDefault   Boolean @default(false) // Default list for user

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  favorites Favorite[] // Properties in this list

  @@map("favorite_lists")
}

// Property Request model - send request to contact (pay) (Picture 2-4)
model PropertyRequest {
  id String @id @default(cuid())

  // Request details
  type    RequestType // VISIT_REQUEST, INTEREST_REQUEST, BUY_REQUEST
  message String // Request message
  status  RequestStatus @default(PENDING)

  // Request-specific information
  preferredDate DateTime? // Preferred date for visit
  preferredTime String? // Preferred time for visit
  budget        Float? // Budget (for buy/rent requests)
  timeline      String? // Timeline (urgent, 1-3 months, etc.)

  // Seller response
  sellerResponse String? // Seller's response message
  responseDate   DateTime? // When seller responded

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  buyer      User     @relation(fields: [userId], references: [id]) // User making the request
  buyerId    String
  property   Property @relation(fields: [propertyId], references: [id]) // Property being requested
  propertyId String

  // Related entities
  viewings PropertyViewing[] // Scheduled viewings from this request
  payments Payment[] // Payments related to this request
  userId   String

  @@map("property_requests")
}

// Property Inquiry model - general inquiries about properties
model PropertyInquiry {
  id String @id @default(cuid())

  // Inquiry details
  subject String // Inquiry subject
  message String // Inquiry message
  status  String @default("PENDING") // PENDING, RESPONDED, CLOSED

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user       User     @relation(fields: [userId], references: [id]) // User making the inquiry
  userId     String
  property   Property @relation(fields: [propertyId], references: [id]) // Property being inquired about
  propertyId String

  @@map("property_inquiries")
}

// Property Comparison model - compare properties side by side
model PropertyComparison {
  id    String  @id @default(cuid())
  name  String // Comparison name
  notes String? // User notes about comparison

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user                         User                           @relation(fields: [userId], references: [id]) // User creating the comparison
  userId                       String
  PropertyComparisonProperties PropertyComparisonProperties[]

  @@map("property_comparisons")
}

// Property Comparison Properties - many-to-many relationship
model PropertyComparisonProperties {
  id                   String @id @default(cuid())
  propertyComparisonId String
  propertyId           String

  // Relationships
  propertyComparison PropertyComparison @relation(fields: [propertyComparisonId], references: [id], onDelete: Cascade)
  property           Property           @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyComparisonId, propertyId])
  @@map("property_comparison_properties")
}

// Property Review model - reviews written by users
model PropertyReview {
  id String @id @default(cuid())

  // Review details
  rating     Int // Rating (1-5 stars)
  title      String // Review title
  comment    String // Review comment
  isVerified Boolean @default(false) // Verified purchase/rental

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  reviewer   User     @relation(fields: [userId], references: [id]) // User writing the review
  reviewerId String
  property   Property @relation(fields: [propertyId], references: [id]) // Property being reviewed
  propertyId String
  userId     String

  @@unique([reviewerId, propertyId]) // One review per user per property
  @@map("property_reviews")
}

// Property Comment model - comments on properties
model PropertyComment {
  id String @id @default(cuid())

  // Comment details
  content     String // Comment content
  isPublic    Boolean @default(true) // Public or private comment
  isModerated Boolean @default(false) // Comment moderation status

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  author     User     @relation(fields: [userId], references: [id]) // User writing the comment
  authorId   String
  property   Property @relation(fields: [propertyId], references: [id]) // Property being commented on
  propertyId String
  userId     String

  @@map("property_comments")
}

// ==================== SELLER ACTION MODELS (Picture 5-11) ====================

// Property Viewing model - schedule viewings (Picture 5-11)
model PropertyViewing {
  id String @id @default(cuid())

  // Viewing details
  scheduledAt DateTime // Scheduled viewing time
  duration    Int // Duration in minutes
  status      String   @default("SCHEDULED") // SCHEDULED, CONFIRMED, COMPLETED, CANCELLED

  // Viewing information
  notes      String? // Seller notes
  buyerNotes String? // Buyer notes
  location   String? // Meeting location

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  property          Property         @relation(fields: [propertyId], references: [id]) // Property being viewed
  propertyId        String
  seller            User             @relation("PropertyViewingSeller", fields: [sellerId], references: [id]) // Seller/agent scheduling viewing
  sellerId          String
  buyer             User?            @relation("PropertyViewingBuyer", fields: [buyerId], references: [id]) // Buyer attending viewing
  buyerId           String?
  request           PropertyRequest? @relation(fields: [propertyRequestId], references: [id]) // Related property request
  requestId         String?
  propertyRequestId String?

  @@map("property_viewings")
}

// Property Analytics model - monitor performance (Picture 5-11)
model PropertyAnalytics {
  id String @id @default(cuid())

  // Performance metrics
  totalViews     Int @default(0) // Total property views
  uniqueViews    Int @default(0) // Unique user views
  totalFavorites Int @default(0) // Total favorites
  totalRequests  Int @default(0) // Total requests
  totalInquiries Int @default(0) // Total inquiries

  // Engagement metrics
  averageViewDuration Float @default(0) // Average view duration
  bounceRate          Float @default(0) // Bounce rate
  conversionRate      Float @default(0) // Request conversion rate

  // Time-based metrics
  viewsThisWeek  Int @default(0) // Views this week
  viewsThisMonth Int @default(0) // Views this month
  viewsThisYear  Int @default(0) // Views this year

  // Timestamps
  lastCalculated DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([propertyId]) // One analytics record per property
  @@map("property_analytics")
}

// ==================== ADMIN MODELS ====================

// Admin Action model - track admin actions
model AdminAction {
  id String @id @default(cuid())

  // Action details
  action   String // Action performed
  details  String? // Action details
  metadata Json? // Additional action data

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  admin      User      @relation("AdminActionPerformer", fields: [adminId], references: [id]) // Admin performing the action
  adminId    String
  property   Property? @relation(fields: [propertyId], references: [id]) // Property affected
  propertyId String?
  user       User?     @relation("AdminActionTarget", fields: [userId], references: [id]) // User affected
  userId     String?
  agency     Agency?   @relation(fields: [agencyId], references: [id]) // Agency affected
  agencyId   String?

  @@map("admin_actions")
}

// ==================== NOTIFICATION MODELS ====================

// Notification model - user notifications
model Notification {
  id String @id @default(cuid())

  // Notification details
  type    NotificationType
  title   String
  message String
  isRead  Boolean          @default(false)
  readAt  DateTime?

  // Notification data
  data Json? // Additional notification data
  link String? // Link to related content

  // Timestamps
  createdAt DateTime @default(now())

  // Relationships
  user   User   @relation(fields: [userId], references: [id]) // User receiving notification
  userId String

  @@map("notifications")
}

// ==================== PAYMENT MODELS ====================

// Payment model - track payments
model Payment {
  id String @id @default(cuid())

  // Payment details
  amount        Float // Payment amount
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String // Payment method used

  // Transaction information
  transactionId String? // External transaction ID
  description   String? // Payment description

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user              User             @relation(fields: [userId], references: [id]) // User making payment
  userId            String
  property          Property?        @relation(fields: [propertyId], references: [id]) // Property related to payment
  propertyId        String?
  request           PropertyRequest? @relation(fields: [propertyRequestId], references: [id]) // Property request related to payment
  requestId         String?
  propertyRequestId String?

  @@map("payments")
}

// ==================== SEARCH AND FILTER MODELS ====================

// Saved Search model - save search criteria
model SavedSearch {
  id String @id @default(cuid())

  // Search details
  name        String // Search name
  description String? // Search description

  // Search criteria
  propertyTypes    PropertyType[] // Property types to search
  transactionTypes TransactionType[] // Transaction types to search
  minPrice         Float? // Minimum price
  maxPrice         Float? // Maximum price
  minArea          Float? // Minimum area
  maxArea          Float? // Maximum area
  bedrooms         Int? // Number of bedrooms
  bathrooms        Int? // Number of bathrooms
  cities           String[] // Cities to search in
  neighborhoods    String[] // Neighborhoods to search in

  // Search settings
  isActive      Boolean @default(true) // Active search
  notifyOnMatch Boolean @default(false) // Notify when new matches found

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User   @relation(fields: [userId], references: [id]) // User who saved the search
  userId String

  @@map("saved_searches")
}

// ==================== PLATFORM SETTINGS MODELS ====================

// Platform Setting model - platform configuration
model PlatformSetting {
  id String @id @default(cuid())

  // Setting details
  key         String  @unique // Setting key
  value       String // Setting value
  description String? // Setting description
  category    String // Setting category

  // Setting metadata
  dataType String  @default("STRING") // STRING, NUMBER, BOOLEAN, JSON
  isPublic Boolean @default(false) // Public or private setting

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("platform_settings")
}

// ==================== PLATFORM ANALYTICS MODELS ====================

// Platform Analytics model - overall platform statistics
model PlatformAnalytics {
  id String @id @default(cuid())

  // Platform metrics
  totalUsers       Int @default(0) // Total registered users
  activeUsers      Int @default(0) // Active users this month
  totalProperties  Int @default(0) // Total properties listed
  activeProperties Int @default(0) // Active properties

  // Transaction metrics
  totalSales   Int   @default(0) // Total properties sold
  totalRentals Int   @default(0) // Total properties rented
  totalRevenue Float @default(0) // Total platform revenue

  // Engagement metrics
  totalViews     Int @default(0) // Total property views
  totalRequests  Int @default(0) // Total property requests
  totalFavorites Int @default(0) // Total favorites

  // Timestamps
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("platform_analytics")
}
